services:
  telegram-service-app:
    restart: unless-stopped
    container_name: telegram-service-app
    image: telegram-service-app
    build:
      context: .
      dockerfile: Dockerfile
    command: "python -m app.main"
    env_file:
      - .env
    depends_on:
      postgres-app-telegram:
        condition: service_healthy
    networks:
      - telegram-service

  postgres-app-telegram:
    container_name: postgres-app-telegram
    image: postgres:16.3-alpine
    restart: unless-stopped
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres-app-telegram-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${DATABASE_USER} -d $${DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telegram-service
    env_file:
      - .env

  redis:
    container_name: redis-app-telegram
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5
    command: [ "redis-server", "--appendonly yes", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    networks:
      - telegram-service
    env_file:
      - ../.env

volumes:
  postgres-app-telegram-volume:
  redis_data:

networks:
  telegram-service:
    driver: bridge