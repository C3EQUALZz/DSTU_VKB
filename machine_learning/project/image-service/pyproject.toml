[project]
name = "image-colorization-service"
version = "0.1.0"
description = "Microservice for colorization image"
authors = [
    {name = "matebookWindows",email = "dan.kovalev2013@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12,<4.0"
dependencies = [
    "taskiq (>=0.11.17,<0.12.0)",
    "numpy (>=1.26,<2.2)",
    "concurrent-log-handler (>=0.9.25,<0.10.0)",
    "tensorflow (==2.16.1)",
    "opencv-python-headless (>=4.11.0.86,<5.0.0.0)",
    "dishka (>=1.5.3,<2.0.0)",
    "pydantic-settings (>=2.9.1,<3.0.0)",
    "taskiq-redis (>=1.0.7,<2.0.0)",
    "faststream[kafka,prometheus] (>=0.5.40,<0.6.0)",
    "uvicorn (>=0.34.2,<0.35.0)",
    "gunicorn (>=23.0.0,<24.0.0)",
    "fastapi (>=0.115.12,<0.116.0)",
    "python-multipart (>=0.0.20,<0.0.21)",
    "tensorflow-hub (>=0.16.1,<0.17.0)",
    "prometheus-client (>=0.22.0,<0.23.0)",
    "filelock (>=3.18.0,<4.0.0)",
    "sentry-sdk (>=2.29.1,<3.0.0)",
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.10"
mypy = "^1.15.0"
pre-commit = "^4.2.0"
isort = "^6.0.1"

[tool.isort]
multi_line_output=3
include_trailing_comma=true
line_length=120
lines_after_imports=2
lines_between_sections=1
lines_between_types=0
force_alphabetical_sort_within_sections=true
ensure_newline_before_comments=true
combine_as_imports=true
combine_star=true
skip_gitignore=true
balanced_wrapping=true
force_grid_wrap=2
src_paths=["app"]
skip_glob=[
    ".git",
    ".idea",
    ".vscode",
    "venv",
    ".venv",
    "notebooks",
    "migrations"
]
known_fastapi=["fastapi","starlette"]
known_first_party=["application","domain","infrastrure","logic","settings","tests"]
sections=[
    "FUTURE",
    "STDLIB",
    "FASTAPI",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]

[tool.ruff]
line-length = 120
fix = true
extend-exclude = ["tests", "notebooks", "logger"]

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.v1.validator", "pydantic.field_validator"]

[tool.ruff.lint]
select = [
    "I",     # isort                  https://docs.astral.sh/ruff/rules/#isort-i
    "E",     # pycodestyle errors     https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings   https://docs.astral.sh/ruff/rules/#warning-w
    "F",     # pyflakes               https://docs.astral.sh/ruff/rules/#pyflakes-f
    # "D",     # pydocstyle             https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "UP",    # pyupgrade              https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
