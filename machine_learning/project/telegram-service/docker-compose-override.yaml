services:
  telegram-service-app:
    &telegram-service-app
    restart: unless-stopped
    container_name: telegram-service-app
    image: telegram-service-app
    build:
      context: .
      dockerfile: Dockerfile
    command: "python -m app.main"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - telegram-service
      - microservices-network

  taskiq-worker:
    <<: *telegram-service-app
    container_name: task-iq-worker
    command: [ taskiq, worker, app.infrastructure.scheduler:scheduler, -fsd ]

  redis:
    container_name: redis-app-telegram
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5
    command: [ "redis-server", "--appendonly yes", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    networks:
      - telegram-service
    env_file:
      - .env

volumes:
  postgres-app-telegram-volume:
  redis_data:

networks:
  telegram-service:
    driver: bridge
  microservices-network:
    external: true