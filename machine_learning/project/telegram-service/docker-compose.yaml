services:
  telegram-service-app:
    &telegram-service-app
    restart: unless-stopped
    container_name: telegram-service-app
    image: telegram-service-app
    build:
      context: .
      dockerfile: Dockerfile
    command: "python -m app.main"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - telegram-service

  taskiq-worker:
    <<: *telegram-service-app
    container_name: task-iq-worker
    command: [ taskiq, worker, app.infrastructure.scheduler:scheduler, -fsd ]

  redis:
    container_name: redis-app-telegram
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5
    command: [ "redis-server", "--appendonly yes", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data:/data
    networks:
      - telegram-service
    env_file:
      - .env

  broker:
    image: bitnami/kafka:3.9.0
    container_name: broker
    restart: unless-stopped
    networks:
      - kafka-network
      - telegram-service
    ports:
      - "9092:9092"  # localhost доступ
      - "29092:29092" # docker network доступ
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    networks:
      - kafka-network
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092

volumes:
  postgres-app-telegram-volume:
  redis_data:
  kafka_data:

networks:
  telegram-service:
    driver: bridge
  kafka-network:
    driver: bridge