"""
Задача №1620. Субботник

В классе учатся N человек. Классный руководитель получил указание направить на субботник R бригад по С человек в каждой.

Все бригады на субботнике будут заниматься переноской бревен. Каждое бревно одновременно несут все члены одной бригады.
При этом бревно нести тем удобнее, чем менее различается рост членов этой бригады.

Числом неудобства бригады будем называть разность между ростом самого высокого и ростом самого низкого членов этой
бригады (если в бригаде только один человек, то эта разница равна 0).
Классный руководитель решил сформировать бригады так, чтобы максимальное из чисел неудобства сформированных
бригад было минимально. Помогите ему в этом!

Рассмотрим следующий пример. Пусть в классе 8 человек, рост которых в сантиметрах равен 170, 205, 225, 190, 260, 130,
225, 160, и необходимо сформировать две бригады по три человека в каждой. Тогда одним из вариантов является такой:

- 1 бригада: люди с ростом 225, 205, 225

- 2 бригада: люди с ростом 160, 190, 170

При этом число неудобства первой бригады будет равно 20, а число неудобства второй — 30.
Максимальное из чисел неудобств будет 30, и это будет наилучший возможный результат.

Формат входных данных

Сначала вводятся натуральные числа N, R и C — количество человек в классе, количество бригад и количество человек в
каждой бригаде (1 ≤ R∙C ≤ N ≤ 100 000).
Далее вводятся N целых чисел — рост каждого из N учеников.
Рост ученика — натуральное число, не превышающее 1 000 000 000.

Формат выходных данных

Выведите одно число — наименьше возможное значение максимального числа неудобства сформированных бригад.
"""

from typing import Iterable, List


def can_form_branches(
    max_uncomfortable: int, discomforts: Iterable[int], r: int, c: int
) -> bool:
    """
    Проверяет, можно ли сформировать r бригад по c человек так, чтобы максимальное число неудобства
    не превышало max_uncomfortable.

    :param max_uncomfortable: Максимальное неудобство.
    :param discomforts: Все неудобства.
    :param r: Количество бригад.
    :param c: Количество человек в каждой бригаде.
    """
    count = 0  # Количество сформированных бригад
    members_in_current_branch = 0  # Количество членов в текущей бригаде

    for discomfort in discomforts:
        members_in_current_branch -= 1  # Уменьшаем количество членов в текущей бригаде
        if members_in_current_branch < 1 and discomfort <= max_uncomfortable:
            count += 1  # Завершаем текущую бригаду
            members_in_current_branch = c  # Начинаем новую бригаду

    return count >= r  # Проверяем, достаточно ли бригад


def find_minimum_max_uncomfortable(
    n: int, r: int, c: int, heights: Iterable[int]
) -> int:
    """
    Находит наименьшее возможное значение максимального числа неудобства сформированных бригад.

    Чтобы нам найти всех ближайших людей друг к другу, логичнее все отсортировать.
    Там каждый друг к другу будет ближе.
    Известно, что количество человек в бригаде равно c, поэтому нахожу разницы между крайними в бригаде,
     чтобы неудобства как раз.

    Далее с помощью бинарного поиска будем искать как раз минимальное неудобство.

    :param n: Количество человек в классе.
    :param r: Количество бригад.
    :param c: Количество человек в каждой бригаде.
    :param heights: Высоты всех людей, который передали по условию задачи.
    """
    heights: List[int] = sorted(heights)  # Сортируем рост учеников
    discomforts: List[int] = [
        heights[i + c - 1] - heights[i] for i in range(n - c + 1)
    ]  # Вычисляем неудобства

    left = -1
    right = heights[-1] - heights[0]

    while left + 1 < right:
        mid = (left + right) // 2
        if can_form_branches(mid, discomforts, r, c):
            right = mid  # Уменьшаем максимальное неудобство
        else:
            left = mid  # Увеличиваем максимальное неудобство

    return right  # Минимальное максимальное неудобство


def main() -> None:
    n, r, c = map(int, input().split())
    heights: List[int] = [int(input()) for _ in range(n)]
    result: int = find_minimum_max_uncomfortable(n, r, c, heights)
    print(result)


if __name__ == "__main__":
    main()
