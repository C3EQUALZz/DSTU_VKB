"""
Задача №1791. Расстояние по Левенштейну

Дана текстовая строка. С ней можно выполнять следующие операции:

1. Заменить один символ строки на другой символ.

2. Удалить один произвольный символ.

3. Вставить произвольный символ в произвольное место строки.

Например, при помощи первой операции из строки "СОК" можно получить строку "СУК",
при помощи второй операции - строку "ОК", при помощи третьей операции - строку "СТОК.

Минимальное количество таких операций, при помощи которых можно из одной строки получить другую,
называется стоимостью редактирования или расстоянием Левенштейна.

Определите расстояние Левенштейна для двух данных строк.

Входные данные

Программа получает на вход две строки, длина каждой из которых не превосходит 1000 символов,
строки состоят только из заглавных латинских букв.

Выходные данные

Требуется вывести одно число – расстояние Левенштейна для данных строк.
"""

from itertools import product
from typing import AnyStr, List


def levenshtein_distance(source: AnyStr, target: AnyStr) -> int:
    """
    Вычисляет расстояние Левенштейна между двумя строками.

    Расстояние Левенштейна - это минимальное количество операций (вставка, удаление, замена),
    необходимых для преобразования одной строки в другую.

    Алгоритм работает следующим образом:
    1. Создается двумерный массив `distance_table`, где `distance_table[i][j]` хранит
       расстояние Левенштейна между первыми `i` символами строки `source` и первыми `j` символами строки `target`.
    2. Инициализируются первая строка и первый столбец массива:
       - `distance_table[i][0]` равен `i`, что соответствует удалению всех `i` символов из `source`.
       - `distance_table[0][j]` равен `j`, что соответствует вставке всех `j` символов в `source`.
    3. Заполняется массив, сравнивая символы строк:
       - Если символы совпадают, то значение берется из `distance_table[i-1][j-1]`.
       - Если символы не совпадают, то значение вычисляется как 1 плюс минимальное из трех возможных операций:
         - Удаление символа из `source` (`distance_table[i-1][j]`).
         - Вставка символа в `source` (`distance_table[i][j-1]`).
         - Замена символа в `source` на символ из `target` (`distance_table[i-1][j-1]`).
    4. Возвращается значение в правом нижнем углу массива, которое представляет расстояние Левенштейна между двумя строками.

    :param source: Исходная строка.
    :param target: Целевая строка.
    :return: Расстояние Левенштейна между строками `source` и `target`.
    """
    len_source: int = len(source)
    len_target: int = len(target)

    # Создаем таблицу для хранения расстояний
    distance_table: List[List[int]] = [
        [0] * (len_target + 1) for _ in range(len_source + 1)
    ]

    # Инициализация первой строки и первого столбца
    for i, j in zip(range(len_source + 1), range(len_target + 1)):
        distance_table[i][0] = i  # Расстояние от source до пустой строки
        distance_table[0][j] = j  # Расстояние от пустой строки до target

    # Заполняем таблицу
    for i, j in product(range(1, len_source + 1), range(1, len_target + 1)):
        if source[i - 1] == target[j - 1]:
            distance_table[i][j] = distance_table[i - 1][j - 1]  # Символы совпадают
        else:
            distance_table[i][j] = 1 + min(
                distance_table[i - 1][j],
                distance_table[i][j - 1],
                distance_table[i - 1][j - 1],
            )  # Удаление, вставка, замена

    return distance_table[len_source][len_target]


def main() -> None:
    a: str = input()
    b: str = input()

    distance = levenshtein_distance(a, b)
    print(distance)


if __name__ == "__main__":
    main()
