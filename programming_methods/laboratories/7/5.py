"""
Задача №111819. Рекламный щит

Для рекламы своей новой продукции в Китае одна компания решила разместить на небоскребе рекламный щит.
Щит состоит из лампочек, организованных в форме прямоугольной сетки из n строк и m столбцов.
В любой момент каждая из лампочек может быть либо включена, либо выключена.

Рекламное сообщение состоит из k иероглифов, которые будут показываться один за другим.
Для каждого иероглифа известно, какие лампочки должны быть включены при отображении этого иероглифа.
Остальные лампочки должны быть выключены.

Для управления рекламным щитом разрабатывается специальная система.
Система может включать и выключать лампочки целыми группами.
Все лампочки разбиваются на несколько групп так, что в каждом иероглифе лампочки из одной группы должны
быть либо все включены, либо все выключены.

Для оптимизации работы системы управления необходим разбить лампочки на минимальное возможное число таких групп.
Помогите сотрудникам рекламного отдела компании решить эту задачу.

Формат входного файла

В первой строке входного файла заданы числа k, n и m (1≤k,n,m≤100) - количество иероглифов в рекламном сообщении,
высота и ширина рекламного щита.

Далее, в kn строках идет описание иероглифов. Каждый из k иероглифов задается n строками по m символов в каждой.
Все эти строки состоят только из символов «*» и «.», «*» соответствует включенной лампочке, «.» - выключенной.

Формат выходного файла

Выведите минимальное число групп, на которое можно разбить лампочки.
"""

from collections import defaultdict
from itertools import product
from typing import List, Sequence


def find_minimum_groups(k: int, n: int, m: int, hieroglyphs: Sequence[str]) -> int:
    """
    Находит минимальное количество групп лампочек, на которые можно разбить лампочки рекламного щита,
    чтобы для каждого иероглифа все лампочки из одной группы были либо включены, либо выключены.

    Алгоритм работы:

    1. Для каждой лампочки (в каждой строке и каждом столбце рекламного щита) составляется ключ.
       Этот ключ представляет собой строку, которая включает информацию о состоянии данной лампочки
       во всех иероглифах. Например, для каждого иероглифа мы берем состояние лампочки на текущей позиции
       и создаем строку, которая будет использоваться в качестве уникального ключа.

    2. Проходим по всем строкам и столбцам рекламного щита (с помощью `product(range(n), range(m))`),
       для каждой лампочки строим ключ для этой лампочки на основе состояния во всех иероглифах. Каждый ключ
       будет представлять собой комбинацию состояний лампочки для каждого иероглифа.

    3. С помощью словаря `lamp_groups` подсчитываем количество уникальных ключей. Каждый уникальный ключ
       соответствует группе лампочек, которые должны быть включены или выключены одновременно.

    4. Количество уникальных ключей и будет минимальным числом групп лампочек, на которые можно разбить рекламный щит.

    :param k: Количество иероглифов в рекламном сообщении.
    :param n: Высота рекламного щита (количество строк).
    :param m: Ширина рекламного щита (количество столбцов).
    :param hieroglyphs: Список строк, представляющих иероглифы, где каждый иероглиф описан n строками по m символов.

    :returns: Минимальное количество групп лампочек, на которые можно разбить лампочки рекламного щита.
    """
    lamp_groups: defaultdict[str, int] = defaultdict(int)

    for row, col in product(range(n), range(m)):
        # Формируем ключ для группы лампочек на основе текущего столбца и всех иероглифов
        lamp_key = "".join(hieroglyphs[glyph * n + row][col] for glyph in range(k))
        lamp_groups[lamp_key] += 1

    # Количество уникальных групп лампочек
    return len(lamp_groups)


def main() -> None:
    k, n, m = map(int, input().split())
    hieroglyphs: List[str] = [input() for _ in range(k * n)]

    print(find_minimum_groups(k, n, m, hieroglyphs))


if __name__ == "__main__":
    main()
