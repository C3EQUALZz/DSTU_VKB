services:
  user-service-course-work:
    restart: unless-stopped
    container_name: user-service-course-work
    image: user-service-course-work
    build:
      context: ..
      dockerfile: Dockerfile
    command: [ "sh", "-c", "alembic upgrade head && gunicorn --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --workers 4 --timeout 120 --log-level info app.main:create_app" ]
    ports:
      - "${API_PORT}:8000"
    env_file:
      - .env
    depends_on:
      postgres-course-work:
        condition: service_healthy
      redis-course-work:
        condition: service_healthy
      broker-course-work:
        condition: service_healthy
    networks:
      - course-work-network

  postgres-course-work:
    container_name: postgres-course-work
    image: postgres:16.3-alpine
    restart: unless-stopped
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres_data_users:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${DATABASE_USER} -d $${DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - course-work-network
    env_file:
      - .env

  redis-course-work:
    container_name: redis-course-work
    image: redis:6.2-alpine
    restart: unless-stopped
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5
    command: [ "redis-server", "--appendonly yes", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis_data_course_work:/data
    env_file:
      - .env
    networks:
      - course-work-network

  broker-course-work:
    image: bitnami/kafka:3.9.0
    container_name: broker-course-work
    restart: unless-stopped
    networks:
      - kafka-network
      - course-work-network
    ports:
      - "9092:9092"  # localhost доступ
      - "29092:29092" # docker network доступ
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data_course_work:/bitnami/kafka

volumes:
  postgres_data_users:
  pgadmin_data_users:
  redis_data_course_work:
  kafka_data_course_work:

networks:
  course-work-network:
    driver: bridge
  kafka-network:
    driver: bridge